#!/usr/bin/env node

const rl = require('readline');
const path = require('path');
const fs = require('fs');
const chalk = require('chalk');
const figlet = require('figlet');
const delay = require('delay');
const encryptor = require('file-encryptor');
const commands = ['create', 'get', 'delete', 'help'];
const Model  = require('../actions/usage');
const hidefile = require('hidefile');
const args = process.argv;
let get = new Model();

// usage represents the help guide
    const usage = function() {
        const usageText = `
        ${chalk.yellow(
            figlet.textSync('pamo', { horizontalLayout: 'full' })
        )}
        
  Kpamo is a simple document based database.

  usage:
    ✌ pamo <command>

    commands can be:

    create:  used to create a new database
    get:     used to retrieve your database
    delete:  used to delete a database
    help:    used to print the usage guide
  `;
        console.log(usageText)
    }

// used to log errors to the console in red color
    function errorLog(error) {
        console.log(chalk.red(error))
    }

// we make sure the length of the arguments is exactly three
    if (args.length > 3) {
        errorLog(`only one argument can be accepted`)
        usage()
    }

    if (commands.indexOf(args[2]) === -1) {
        usage()
    }

    switch(args[2]) {
        case 'help':
            usage();
            break
        case 'create':
            newDatabase().then(r => {});
            break
        case 'get':
            listDB().then(r => {});
            break
        case 'delete':
            deleteDB().then(r => {

            })
            break
        default:
            errorLog('invalid command passed')
            usage()
    }


    function prompt(question) {
        const r = rl.createInterface({
            input: process.stdin,
            output: process.stdout,
            terminal: false
        });
        return new Promise((resolve, error) => {
            r.question(question, answer => {
                r.close()
                resolve(answer)
            });
        })
    }

    async function newDatabase() {
        const question = chalk.blue('Type in your database name : ')
        let create = await prompt(question);
        await createFile(create);
    }

    async function listDB(){
        let directoryPath =  path.join(process.cwd(), `/.tmp`);
        fs.readdir(directoryPath,  (err, files) => {
            if (err) {
                return console.log('Unable to scan directory: ' + err);
            }
            files.forEach(function (file) {
                console.log(file.replace(/\.[^/.]+$/, "") + ' ' + '✔');
            });
        });
    }

    async function createFile(name){
        let dir = path.join(process.cwd(), `tmp/`);
        if (!fs.existsSync(dir)){
            fs.mkdirSync(dir);
            await delay(4000);
            hidefile.hideSync(dir);
        }
        fs.appendFile(`./.tmp/${name}.json`, "[]",  (err) => {
            if (err) console.log(chalk.red(err));
            console.log(`${name} document db created successfully`);
        });
        let directory = path.join(process.cwd(), `.tmp/${name}.json`);
        let key = 'My Super Secret Key';
        await delay(4000);
        encryptor.encryptFile(directory, `${path.join(process.cwd(), `.tmp/`)}/${name}.dat`, key, function(err) {
            console.log(`${name} document encrypted file created successfully`);
        });
    }

    async function deleteDB(){
        const question = chalk.blue('Type in your database name you would like to delete : ')
        let create = await prompt(question);
        await deleteFile(create);
    }

    async function deleteFile(name){
        let pathToFile =  path.join(process.cwd(), `tmp/${name}.json`);
        fs.unlink(pathToFile, function(err) {
            if (err) {
                console.log(chalk.red(`No db document such as ${name}`))
                process.exit(1);
            } else {
                console.log(chalk.green('Database successfully deleted'))
                process.exit(1);
            }
        })
    }