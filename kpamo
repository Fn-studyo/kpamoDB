#!/usr/bin/env node

const chalk = require('chalk')
const args = process.argv
const rl = require('readline');

const low = require('lowdb')
const FileSync = require('lowdb/adapters/FileSync')



const commands = ['create', 'get', 'delete', 'help'];



// usage represents the help guide
const usage = function() {
  const usageText = `
  Kpamo is a simple document based database.

  usage:
    kpamo <command>

    commands can be:

    create:  used to create a new database
    get:     used to retrieve your database
    delete:  used to delete a database
    help:    used to print the usage guide
  `

  console.log(usageText)
}

// used to log errors to the console in red color
function errorLog(error) {
  const eLog = chalk.red(error)
  console.log(eLog)
}

// we make sure the length of the arguments is exactly three
if (args.length > 3) {
  errorLog(`only one argument can be accepted`)
  usage()
}

if (commands.indexOf(args[2]) == -1) {
  errorLog('invalid command passed')
  usage()
}

switch(args[2]) {
  case 'help':
    usage()
    break
  case 'create':
    newDatabase().then(r => {});
    break
  case 'get':
    break
  case 'complete':
    break
  default:
    errorLog('invalid command passed')
    usage()
}


function prompt(question) {
  const r = rl.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
  });
  return new Promise((resolve, error) => {
    r.question(question, answer => {
      r.close()
      resolve(answer)
    });
  })
}

async function newDatabase() {
  const question = chalk.blue('Type in your database name : ')
  let create = await prompt(question);
  await createFile(create);
}

async function createFile(name){
  const adapter = new FileSync(`db/${name}.json`)
  const db = low(adapter);
  db.defaults({ todos: []}).write()
}